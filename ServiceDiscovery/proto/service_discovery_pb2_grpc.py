# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import service_discovery_pb2 as proto_dot_service__discovery__pb2


class ServiceRegistryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterService = channel.unary_unary(
                '/ServiceRegistry/RegisterService',
                request_serializer=proto_dot_service__discovery__pb2.ServiceInfo.SerializeToString,
                response_deserializer=proto_dot_service__discovery__pb2.Empty.FromString,
                )
        self.DiscoverService = channel.unary_unary(
                '/ServiceRegistry/DiscoverService',
                request_serializer=proto_dot_service__discovery__pb2.ServiceRequest.SerializeToString,
                response_deserializer=proto_dot_service__discovery__pb2.ServiceInfo.FromString,
                )
        self.CheckHealth = channel.unary_unary(
                '/ServiceRegistry/CheckHealth',
                request_serializer=proto_dot_service__discovery__pb2.Empty.SerializeToString,
                response_deserializer=proto_dot_service__discovery__pb2.HealthStatus.FromString,
                )


class ServiceRegistryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiscoverService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckHealth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServiceRegistryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterService': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterService,
                    request_deserializer=proto_dot_service__discovery__pb2.ServiceInfo.FromString,
                    response_serializer=proto_dot_service__discovery__pb2.Empty.SerializeToString,
            ),
            'DiscoverService': grpc.unary_unary_rpc_method_handler(
                    servicer.DiscoverService,
                    request_deserializer=proto_dot_service__discovery__pb2.ServiceRequest.FromString,
                    response_serializer=proto_dot_service__discovery__pb2.ServiceInfo.SerializeToString,
            ),
            'CheckHealth': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckHealth,
                    request_deserializer=proto_dot_service__discovery__pb2.Empty.FromString,
                    response_serializer=proto_dot_service__discovery__pb2.HealthStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ServiceRegistry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServiceRegistry(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ServiceRegistry/RegisterService',
            proto_dot_service__discovery__pb2.ServiceInfo.SerializeToString,
            proto_dot_service__discovery__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DiscoverService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ServiceRegistry/DiscoverService',
            proto_dot_service__discovery__pb2.ServiceRequest.SerializeToString,
            proto_dot_service__discovery__pb2.ServiceInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ServiceRegistry/CheckHealth',
            proto_dot_service__discovery__pb2.Empty.SerializeToString,
            proto_dot_service__discovery__pb2.HealthStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
