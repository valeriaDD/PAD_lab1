services:
  scooters-management:
    container_name: scooters-management
    build: ./ScootersService
    image: scooters_management:1.0
    restart: always
    volumes:
      - ./ScootersService:/user/src
    ports:
      - 3000:3000
      - 30001:30001
    expose:
      - 3000
      - 30001
    environment:
      DB_HOST: scootersdb
      DB_PORT: 3306
      DB_USER: 'admin'
      DB_PASSWORD: 'password'
      DB_NAME: scootersdb
      DB_CONNECTION_LIMIT: 10
      SERVICE_NAME: scooters-management
      SERVER_PORT: 3000
      SERVICE_DISCOVERY_PORT: 2000
      SERVICE_DISCOVERY_HOST: service-discovery
    depends_on:
      - scootersdb
      - service-discovery
    networks:
      - scooter-rent

  scootersdb:
    image: mysql:8.0
    container_name: scooters-db
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped
    volumes:
      - ./ScootersService/dbinit/init.sql:/docker-entrypoint-initdb.d/0_init.sql
      - $HOME/database/2:/var/lib/mysql
    ports:
      - 3306:3306
    expose:
      - 3306
    environment:
      MYSQL_DATABASE: scootersdb
      MYSQL_USER: admin
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
      SERVICE_TAGS: dev
      SERVICE_NAME: scootersdb
    networks:
      - scooter-rent

  bookings-management:
    container_name: bookings-management
    build: ./BookingService
    image: bookings_management:1.0
    restart: always
    volumes:
      - ./BookingService:/user/src
    ports:
      - 3001:3001
    expose:
      - 3001
    environment:
      DB_HOST: bookingsdb
      DB_PORT: 3306
      DB_USER: 'admin'
      DB_PASSWORD: 'password'
      DB_NAME: bookingsdb
      DB_CONNECTION_LIMIT: 10
      SERVICE_NAME: bookings-management
      SERVER_PORT: 3001
      SERVICE_DISCOVERY_PORT: 2000
      SERVICE_DISCOVERY_HOST: service-discovery
      TIMEOUT: 3000
    depends_on:
      - bookingsdb
      - service-discovery
      - scooters-management
    networks:
      - scooter-rent

  bookingsdb:
    image: mysql:8.0
    container_name: bookings-db
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped
    volumes:
      - ./BookingService/dbinit/init.sql:/docker-entrypoint-initdb.d/0_init.sql
      - $HOME/project/database1:/var/lib/mysql
    ports:
      - 3305:3306
    expose:
      - 3305
    environment:
      MYSQL_DATABASE: bookingsdb
      MYSQL_USER: admin
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
      SERVICE_TAGS: dev
      SERVICE_NAME: bookingsdb
    networks:
      - scooter-rent

  service-discovery:
    container_name: service-discovery
    build: ./ServiceDiscovery
    image: service-discovery:1.0
    restart: always
    volumes:
      - ./ServiceDiscovery:/app
    ports:
      - 2000:2000
    expose:
      - 2000
    environment:
      SERVICE_NAME: service-discovery
      SERVER_PORT: 2000
    networks:
      - scooter-rent

  api-gateway:
    container_name: api-gateway
    build: ./ApiGateway
    image: api-gateway:1.0
    restart: always
    volumes:
      - ./ApiGateway:/app
    ports:
      - 2050:2050
    expose:
      - 2050
    environment:
      SERVICE_NAME: api-gateway
      SERVER_PORT: 2050
    networks:
      - scooter-rent

  coordinator:
    container_name: coordinator
    build: ./CoordinatorService
    image: coordinator:1.0
    restart: always
    ports:
      - 7000:7000
    expose:
      - 7000
    volumes:
      - ./CoordinatorService:/user/src
    environment:
      SERVICE_NAME: coordinator
      SERVER_PORT: 7000
      SERVICE_DISCOVERY_PORT: 2000
      SERVICE_DISCOVERY_HOST: service-discovery
      TIMEOUT: 3000
    depends_on:
      - service-discovery
      - scooters-management
      - bookings-management
    networks:
      - scooter-rent

  redis:
    container_name: redis-container
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - scooter-rent

  redis_2:
    container_name: redis-container-2
    image: redis:latest
    ports:
      - "6380:6379"
    volumes:
      - redis-data2:/data
    networks:
      - scooter-rent

#  elasticsearch:
#    image: elasticsearch:7.16.2
#    container_name: elasticsearch
#    restart: always
#    volumes:
#      - elasticsearch-data-volume:/usr/share/elasticsearch/data
#    environment:
#      xpack.security.enabled: "false"
#      discovery.type: single-node
#      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
#    ports:
#      - '9200:9200'
#      - '9300:9300'
#    networks:
#      - scooter-rent
#
#  logstash:
#    image: logstash:7.16.2
#    container_name: logstash
#    restart: always
#    volumes:
#      - ./ELK/logstash/:/logstash_dir
#    command: logstash -f /logstash_dir/logstash.conf
#    depends_on:
#      - elasticsearch
#    ports:
#      - '9600:9600'
#    environment:
#      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
#    networks:
#      - scooter-rent
#
#  kibana:
#    image: kibana:7.16.2
#    container_name: kibana
#    restart: always
#    ports:
#      - '5601:5601'
#    environment:
#      - ELASTICSEARCH_URL=http://elasticsearch:9200
#    depends_on:
#      - elasticsearch
#    networks:
#      - scooter-rent

networks:
  scooter-rent:
    driver: bridge

volumes:
  redis-data:
  redis-data2:
  elasticsearch-data-volume:
    driver: local
